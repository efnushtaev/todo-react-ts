{"version":3,"sources":["components/navbar/Navbar.tsx","pages/AboutPage.tsx","components/todo-form/TodoForm.tsx","components/todo-list/TodoList.tsx","pages/TodosPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","AboutPage","history","useHistory","onClick","push","TodoForm","onAdd","useState","title","setTilte","onChange","event","target","value","onKeyPress","key","type","id","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","join","checked","preventDefault","removeHandler","TodoPage","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","console","log","newTodo","Date","now","prev","confirm","filter","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOAGaA,EAAmB,WAC9B,OAAO,6BACL,yBAAKC,UAAU,iCACb,uBAAGC,KAAK,SAASD,UAAU,cAA3B,sBACA,wBAAIA,UAAU,8BACZ,4BAAI,kBAAC,IAAD,CAASE,GAAG,KAAZ,4DACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,qE,OCNCC,EAAsB,WACjC,IAAMC,EAAUC,cAChB,OAAO,oCACL,6IACA,sKAEA,4BAAQC,QAAS,kBAAMF,EAAQG,KAAK,MAAMP,UAAU,OAApD,+G,gBCHSQ,EAAoC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EAClCC,mBAAiB,IADiB,mBACrDC,EADqD,KAC9CC,EAD8C,KAc5D,OAAO,yBAAKZ,UAAU,mBAClB,2BACEa,SAbgB,SAACC,GACrBF,EAASE,EAAMC,OAAOC,QAalBC,WAVkB,SAACH,GACL,UAAdA,EAAMI,MACRT,EAAME,GACNC,EAAS,MAQPI,MAAOL,EACPQ,KAAK,OACLC,GAAG,QACHC,YAAa,yHAEf,2BAAOC,QAAQ,QAAQtB,UAAU,UAAjC,0HCpBOuB,EAAoC,SAAC,GAI3C,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SAGA,GAAqB,IAAjBF,EAAMG,OACR,OAAO,uBAAG3B,UAAU,UAAb,mEAQT,OAAO,4BACFwB,EAAMI,KAAI,SAAAC,GACT,IAAMC,EAAU,CAAC,QAMnB,OAJMD,EAAKE,WACPD,EAAQvB,KAAK,aAGV,wBACLP,UAAW8B,EAAQE,KAAK,KACxBd,IAAKW,EAAKT,IAEV,+BACE,2BAAOD,KAAK,WAAWc,QAASJ,EAAKE,UAAWzB,QAAS,kBAAMoB,EAASG,EAAKT,OAC7E,0BAAMpB,UAAW,2BAA4B6B,EAAKlB,OAClD,uBAAGL,QAAS,SAAAQ,GAAK,OApBH,SAACA,EAAyBM,GAC9CN,EAAMoB,iBACNT,EAASL,GAkBkBe,CAAcrB,EAAOe,EAAKT,KAAKpB,UAAU,2BAA9D,iBChCGoC,EAAqB,WAAO,IAAD,EACZ1B,mBAAkB,IADN,mBAC/Bc,EAD+B,KACxBa,EADwB,KAGtCC,qBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC1DN,EAASE,KACR,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUrB,IAC7CsB,QAAQC,IAAI,cACX,CAACvB,IAwBJ,OAAO,oCACL,kBAAC,EAAD,CAAUf,MAlBO,SAACE,GAClB,IAAMqC,EAAiB,CACrBrC,QACAS,GAAI6B,KAAKC,MACTnB,WAAW,GAEbM,GAAS,SAAAc,GAAI,OAAKH,GAAL,mBAAiBG,UAa9B,kBAAC,EAAD,CAAU3B,MAAOA,EAAOE,SAVJ,SAACN,GACrBiB,EAASb,EAAMI,KAAI,SAAAC,GAGf,OAFEA,EAAKT,KAAOA,IACdS,EAAKE,WAAaF,EAAKE,WAChBF,OAMsCJ,SAxB7B,SAACL,GACAgC,QAAQ,4MACbf,GAAS,SAAAc,GAAI,OAAIA,EAAKE,QAAO,SAAAxB,GAAI,OAAIA,EAAKT,KAAOA,aCHtDkC,EAbO,WAEpB,OAAO,kBAAC,IAAD,KACL,kBAAC,EAAD,MACA,yBAAKtD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuD,UAAWnB,EAAUoB,KAAK,IAAIC,OAAK,IAC1C,kBAAC,IAAD,CAAOF,UAAWpD,EAAWqD,KAAK,SAASC,OAAK,QCDpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.edbf2126.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const Navbar: React.FC = () => {\r\n  return <nav>\r\n    <div className=\"nav-wrapper teal darken-3 px1\">\r\n      <a href='/index' className=\"brand-logo\">React + TypeScript</a>\r\n      <ul className=\"right hide-on-med-and-down\">\r\n        <li><NavLink to='/'>Список дел</NavLink></li>\r\n        <li><NavLink to='/about'>Инофрмация</NavLink></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n}","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  const history = useHistory()\r\n  return <>\r\n    <h1>Страница информации</h1>\r\n    <p>Важный текст важный текст</p>\r\n\r\n    <button onClick={() => history.push('/')} className=\"btn\">\r\n      Обратно к списку дел\r\n    </button>\r\n  </>\r\n}","import React, {useState} from 'react';\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = ({onAdd}) => {\r\n  const [title, setTilte] = useState<string>('')\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTilte(event.target.value)\r\n  }\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      onAdd(title)\r\n      setTilte('')\r\n    }\r\n  }\r\n\r\n  return <div className=\"input-field mt2\">\r\n      <input\r\n        onChange={changeHandler}\r\n        onKeyPress={keyPressHandler}\r\n        value={title}\r\n        type=\"text\"\r\n        id=\"title\"\r\n        placeholder={\"Введите название дела\"}\r\n        />\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Введите название дела\r\n      </label>\r\n    </div>\r\n}","import React from 'react'\r\nimport { ITodo } from '../../interfaces'\r\n\r\ntype TodoListProps = {\r\n  todos: ITodo[]\r\n  onToggle: (id:number) => void\r\n  onRemove: (id:number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n  todos,\r\n  onRemove,\r\n  onToggle\r\n}) => {\r\n\r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">Пока дел нет!</p>\r\n  }\r\n\r\n  const removeHandler = (event: React.MouseEvent, id:number) => {\r\n    event.preventDefault()\r\n    onRemove(id)\r\n  }\r\n\r\n  return <ul>\r\n      {todos.map(todo => {\r\n        const classes = ['todo']\r\n\r\n        if (todo.completed) {\r\n          classes.push('completed')\r\n        }\r\n\r\n      return <li \r\n        className={classes.join(' ')} \r\n        key={todo.id}\r\n      >\r\n        <label>\r\n          <input type=\"checkbox\" checked={todo.completed} onClick={() => onToggle(todo.id)}/>\r\n          <span className={\"grey-text text-darken-2\"}>{todo.title}</span>\r\n          <i onClick={event => removeHandler(event, todo.id)} className=\"material-icons red-text\">delete</i>\r\n        </label>\r\n      </li>})}\r\n    </ul>\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { TodoForm } from '../components/todo-form/TodoForm';\r\nimport { TodoList } from '../components/todo-list/TodoList';\r\nimport { ITodo } from '../interfaces';\r\n\r\ndeclare var confirm: (question: string) => boolean\r\n\r\nexport const TodoPage: React.FC = () => {\r\n  const [todos, setTodos] = useState<ITodo[]>([])\r\n  \r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\r\n    setTodos(saved)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n    console.log('rerender')\r\n  }, [todos])\r\n\r\n  const removeHandler = (id: number) => {\r\n    const shouldRemove = confirm('Вы уверены, что хотите удалить элемент?')\r\n    shouldRemove && setTodos(prev => prev.filter(todo => todo.id !== id))\r\n  }\r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    setTodos(prev => [newTodo, ...prev])\r\n  }\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos(todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed;\r\n      } return todo\r\n    }))\r\n  }\r\n\r\n  return <>\r\n    <TodoForm onAdd={addHandler}/>\r\n    <TodoList todos={todos} onToggle={toggleHandler} onRemove={removeHandler}/>\r\n  </>\r\n}","import React from 'react';\nimport { Navbar } from './components/navbar/Navbar';\nimport { AboutPage } from './pages/AboutPage';\nimport { TodoPage } from './pages/TodosPage';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\n\nconst App: React.FC = () => {\n\n  return <HashRouter>\n    <Navbar />\n    <div className=\"container\">\n      <Switch>\n        <Route component={TodoPage} path='/' exact />\n        <Route component={AboutPage} path='/about' exact />\n      </Switch>\n    </div>\n  </HashRouter>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      // process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}